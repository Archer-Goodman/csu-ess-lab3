[
  {
    "objectID": "lab-03.html",
    "href": "lab-03.html",
    "title": "Lab 3: COVID-19",
    "section": "",
    "text": "#Question 1\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(flextable)\n\nWarning: package 'flextable' was built under R version 4.4.3\n\n\n\nAttaching package: 'flextable'\n\nThe following object is masked from 'package:purrr':\n\n    compose\n\nlibrary(zoo)\n\nWarning: package 'zoo' was built under R version 4.4.3\n\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nlibrary(dplyr)\nlibrary(ggplot2)\nRaw_Cov_Data = read.csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\")\n\n#Question 2\n\ntxt &lt;- \"2022-02-01\"\nclass(txt)\n\n[1] \"character\"\n\ndate_example &lt;- as.Date(txt)\nclass(date_example)\n\n[1] \"Date\"\n\nmy.date &lt;- as.Date(\"2022-02-01\")\nmy.state &lt;- \"Colorado\"\n\ncalc_covid_data &lt;- Raw_Cov_Data |&gt;\n  group_by(county) |&gt;\n  arrange(county, date) |&gt;\n  mutate(new_cases = cases - coalesce(lag(cases),0), new_deaths = deaths - coalesce(lag(deaths),0), date = as.Date(date)) |&gt;\n  ungroup()\n\ncalc_covid_data |&gt;\n  filter(new_cases == 0) |&gt; \n  select(date, county, cases, new_cases) |&gt;\n  head(20) |&gt;\n  glimpse()\n\nRows: 20\nColumns: 4\n$ date      &lt;date&gt; 2020-03-20, 2020-03-21, 2020-03-22, 2020-03-23, 2020-03-24,…\n$ county    &lt;chr&gt; \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbevil…\n$ cases     &lt;int&gt; 1, 1, 1, 1, 1, 4, 4, 4, 4, 6, 6, 6, 6, 7, 9, 9, 9, 10, 10, 17\n$ new_cases &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n\nsum(is.na(calc_covid_data$new_cases))\n\n[1] 0\n\nglimpse(calc_covid_data)\n\nRows: 2,502,832\nColumns: 8\n$ date       &lt;date&gt; 2020-03-19, 2020-03-20, 2020-03-21, 2020-03-22, 2020-03-23…\n$ county     &lt;chr&gt; \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbevi…\n$ state      &lt;chr&gt; \"South Carolina\", \"South Carolina\", \"South Carolina\", \"Sout…\n$ fips       &lt;int&gt; 45001, 45001, 45001, 45001, 45001, 45001, 45001, 45001, 450…\n$ cases      &lt;int&gt; 1, 1, 1, 1, 1, 1, 3, 4, 4, 4, 4, 3, 4, 4, 6, 6, 6, 6, 6, 5,…\n$ deaths     &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ new_cases  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, -1, 1, 0, 2, 0, 0, 0, 0, -…\n$ new_deaths &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\nfilter(calc_covid_data, state == my.state, date == my.date) |&gt;\n  slice_max(cases, n = 5) |&gt;\n  select(Date = date, County = county, Cases = cases) |&gt;\n  flextable() |&gt;\n  set_caption(\"Most Total Cases\")\n\nDateCountyCases2022-02-01El Paso170,6732022-02-01Denver159,0222022-02-01Arapahoe144,2552022-02-01Adams126,7682022-02-01Jefferson113,240\n\nfilter(calc_covid_data, state == my.state, date == my.date) |&gt;\n  slice_max(cases, n = 5) |&gt;\n  select(Date = date, County = county, Cases = new_cases) |&gt;\n  flextable() |&gt;\n  set_caption(\"Most New Cases\")\n\nDateCountyCases2022-02-01El Paso-22,1702022-02-01Denver3892022-02-01Arapahoe4012022-02-01Adams122,3962022-02-01Jefferson95,307\n\n\n#Question 3\n\n#STEP ONE\n#Reading in Data\npop_data &lt;- read.csv('https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv')\n\n\n\n#Converting state and county numeric codes into characters\nIntermediate_pop_data &lt;- pop_data |&gt;\n  mutate(state_code = sprintf(\"%02d\",STATE),\n  county_code = sprintf(\"%03d\", pop_data$COUNTY))\n\n\n\n#Combining above state and county codes into one FIP code, Removing state-level rows\nIntermediate_pop_data &lt;- Intermediate_pop_data |&gt;\n  filter(county_code != \"000\") |&gt;\n  mutate(fips = paste(state_code, county_code, sep = \"\"))\n\n#Selecting only columns with the state and county names, and counties that concern the year 2021\nselected_data &lt;- Intermediate_pop_data %&gt;% select(contains(\"NAME\"),\ncontains(\"2021\"),fips)\n\n#STEP TWO\n#Exploring the data\nglimpse(selected_data)\n\nRows: 3,144\nColumns: 19\n$ STNAME                &lt;chr&gt; \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", \"Ala…\n$ CTYNAME               &lt;chr&gt; \"Autauga County\", \"Baldwin County\", \"Barbour Cou…\n$ POPESTIMATE2021       &lt;int&gt; 59203, 239439, 24533, 22359, 59079, 10143, 18890…\n$ NPOPCHG2021           &lt;int&gt; 288, 6212, -436, 171, -28, -86, -135, -565, -163…\n$ BIRTHS2021            &lt;int&gt; 686, 2337, 270, 240, 654, 111, 227, 1250, 392, 2…\n$ DEATHS2021            &lt;int&gt; 696, 2948, 390, 325, 875, 160, 297, 1843, 592, 4…\n$ NATURALCHG2021        &lt;int&gt; -10, -611, -120, -85, -221, -49, -70, -593, -200…\n$ INTERNATIONALMIG2021  &lt;int&gt; 15, 105, 0, 1, 9, 1, 5, 12, 22, 7, 20, 1, 0, -1,…\n$ DOMESTICMIG2021       &lt;int&gt; 242, 6972, -313, 254, 141, -42, -75, -70, -6, 28…\n$ NETMIG2021            &lt;int&gt; 257, 7077, -313, 255, 150, -41, -70, -58, 16, 29…\n$ RESIDUAL2021          &lt;int&gt; 41, -254, -3, 1, 43, 4, 5, 86, 21, 2, 18, 7, 8, …\n$ GQESTIMATES2021       &lt;int&gt; 484, 3351, 2248, 1994, 616, 1578, 285, 5407, 856…\n$ RBIRTH2021            &lt;dbl&gt; 11.615503, 9.888589, 10.908650, 10.775136, 11.06…\n$ RDEATH2021            &lt;dbl&gt; 11.78483, 12.47392, 15.75694, 14.59133, 14.80717…\n$ RNATURALCHG2021       &lt;dbl&gt; -0.1693222, -2.5853351, -4.8482890, -3.8161941, …\n$ RINTERNATIONALMIG2021 &lt;dbl&gt; 0.25398330, 0.44428836, 0.00000000, 0.04489640, …\n$ RDOMESTICMIG2021      &lt;dbl&gt; 4.0975973, 29.5007468, -12.6459537, 11.4036860, …\n$ RNETMIG2021           &lt;dbl&gt; 4.3515806, 29.9450352, -12.6459537, 11.4485824, …\n$ fips                  &lt;chr&gt; \"01001\", \"01003\", \"01005\", \"01007\", \"01009\", \"01…\n\ndim(selected_data)\n\n[1] 3144   19\n\ncolnames(selected_data)\n\n [1] \"STNAME\"                \"CTYNAME\"               \"POPESTIMATE2021\"      \n [4] \"NPOPCHG2021\"           \"BIRTHS2021\"            \"DEATHS2021\"           \n [7] \"NATURALCHG2021\"        \"INTERNATIONALMIG2021\"  \"DOMESTICMIG2021\"      \n[10] \"NETMIG2021\"            \"RESIDUAL2021\"          \"GQESTIMATES2021\"      \n[13] \"RBIRTH2021\"            \"RDEATH2021\"            \"RNATURALCHG2021\"      \n[16] \"RINTERNATIONALMIG2021\" \"RDOMESTICMIG2021\"      \"RNETMIG2021\"          \n[19] \"fips\"                 \n\n#the dimensions are 18 Columns by 3,144 Rows. The selected data only includes columns pertaining to the year 2021, as well as the state and county names\n\n#STEP THREE\nCounty_Pop &lt;- selected_data |&gt;\n  filter(STNAME == my.state) |&gt;\n  pull(POPESTIMATE2021)\nCounty_Range &lt;- range(County_Pop)\nprint(County_Range)\n\n[1]    741 737287\n\n#The range of county populations has a minimum of 741 and a maximum of 737,287\n\n#STEP FOUR\n#Changing the FIPs Column from character to integer\nselected_data &lt;- selected_data |&gt;\n  mutate(fips = as.integer(fips))\n\nsum(calc_covid_data$new_cases)\n\n[1] 53983672\n\n#Now join the tables\nCombined_Data &lt;- calc_covid_data |&gt;\n  left_join(selected_data, by = \"fips\")\n\nCombined_Data |&gt;\n  filter(new_cases == 0) |&gt; \n  select(date, county, cases, new_cases) |&gt;\n  head(20) |&gt;\n  glimpse()\n\nRows: 20\nColumns: 4\n$ date      &lt;date&gt; 2020-03-20, 2020-03-21, 2020-03-22, 2020-03-23, 2020-03-24,…\n$ county    &lt;chr&gt; \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbevil…\n$ cases     &lt;int&gt; 1, 1, 1, 1, 1, 4, 4, 4, 4, 6, 6, 6, 6, 7, 9, 9, 9, 10, 10, 17\n$ new_cases &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n\nsum(is.na(Combined_Data$POPESTIMATE2021))\n\n[1] 93480\n\nCombined_Calculated_Data &lt;- Combined_Data |&gt;\n  mutate(\n    per_cap_total_cases = cases / POPESTIMATE2021,\n    per_cap_new_cases = new_cases / POPESTIMATE2021,\n    per_cap_new_deaths = new_deaths / POPESTIMATE2021\n  )\n\nCombined_Calculated_Data |&gt;\n  filter(new_cases == 0) |&gt; \n  select(date, county, cases, new_cases) |&gt;\n  head(20) |&gt;\n  glimpse()\n\nRows: 20\nColumns: 4\n$ date      &lt;date&gt; 2020-03-20, 2020-03-21, 2020-03-22, 2020-03-23, 2020-03-24,…\n$ county    &lt;chr&gt; \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbeville\", \"Abbevil…\n$ cases     &lt;int&gt; 1, 1, 1, 1, 1, 4, 4, 4, 4, 6, 6, 6, 6, 7, 9, 9, 9, 10, 10, 17\n$ new_cases &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n\nsum(is.na(Combined_Calculated_Data$new_cases))\n\n[1] 0\n\n#sum(is.na(Combined_Calculated_Data$POPESTIMATE2021))\n\nmy_state_data &lt;- Combined_Calculated_Data |&gt;\n  filter(state == my.state)\n\n#STEP FIVE\n#creating two new tables with the top five counties by cumulative and new cases, respectively\nfilter(my_state_data, date == my.date) |&gt;\n  slice_max(per_cap_total_cases, n = 5) |&gt;\n  select(Date = date, County = county, CasesPerPerson = per_cap_total_cases) |&gt;\n  flextable() |&gt;\n  set_caption(\"Most Cumulative Cases Per Capita\")\n\nDateCountyCasesPerPerson2022-02-01Crowley0.51176982022-02-01Bent0.41187492022-02-01Pitkin0.34296592022-02-01Lincoln0.34240822022-02-01Logan0.3047701\n\nfilter(my_state_data, date == my.date) |&gt;\n  slice_max(per_cap_new_cases, n = 5) |&gt;\n  select(Date = date, County = county, NewCasesPerPerson = per_cap_new_cases) |&gt;\n  flextable() |&gt;\n  set_caption(\"Most New Cases Per Capita\")\n\nDateCountyNewCasesPerPerson2022-02-01Adams0.23378362022-02-01Garfield0.21160262022-02-01Douglas0.16979962022-02-01Jefferson0.16412352022-02-01Delta0.1214641\n\n\n#Question 4\n\n#filtering data to include last 14 days\nLast_Two_Weeks &lt;- my_state_data |&gt;\n  filter(date &gt;= (my.date-14), date &lt;= my.date) |&gt;\n  select(date, county, per_cap_total_cases, per_cap_new_cases, per_cap_new_deaths )\n\nLast_Two_Weeks &lt;- Last_Two_Weeks |&gt;\n  group_by(county) |&gt;\n  summarize(Per_100k_People = (sum(per_cap_new_cases, na.rm = FALSE) * 100000))\n  \n\nLast_Two_Weeks |&gt;\n  slice_max(Per_100k_People, n = 5) |&gt;\n  select(County = county, NewCasesPer100kPopulation = Per_100k_People) |&gt;\n  flextable() |&gt;\n  set_caption(\"New Cases Per 100 Thousand People in the last 14 Days\")\n\nCountyNewCasesPer100kPopulationAdams337,706.7Garfield307,532.2Douglas244,403.1Jefferson236,639.6Delta176,898.6\n\nLast_Two_Weeks |&gt;\n  filter(Per_100k_People &gt; 100) |&gt;\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    45\n\n#There are 64 counties that have more than 100 new cases per 100,000 population over the last 14 days\n\n#Question 5\n\nRatio_Covid_Deaths &lt;- my_state_data |&gt;\n  filter(year(date) == year(my.date)) |&gt;\n  select(County = county, Cov_Deaths = deaths, Nominal_Deaths = DEATHS2021)\n\nRatio_Covid_Deaths &lt;- Ratio_Covid_Deaths |&gt;\n  group_by(County) |&gt;\n  summarize(Annum_Covid_Deaths = sum(Cov_Deaths), Annum_Nominal_Deaths = sum(Nominal_Deaths))\n\nRatio_Covid_Deaths &lt;- Ratio_Covid_Deaths |&gt;\n  group_by(County) |&gt;\n  summarize(Percent_Covid_Deaths = (Annum_Covid_Deaths / Annum_Nominal_Deaths) *100) |&gt;\n  filter(Percent_Covid_Deaths &gt; 20) |&gt;\n  glimpse()\n\nRows: 39\nColumns: 2\n$ County               &lt;chr&gt; \"Adams\", \"Alamosa\", \"Arapahoe\", \"Bent\", \"Broomfie…\n$ Percent_Covid_Deaths &lt;dbl&gt; 32.91888, 35.81846, 25.63649, 60.31638, 24.14000,…\n\nAnnum2021_Plot &lt;- ggplot(data = Ratio_Covid_Deaths, \n       aes(x = County, y = Percent_Covid_Deaths)) + \n       geom_col(aes(fill = County)) + \n       geom_hline(yintercept = 20) +\n       labs(title = \"Percent Deaths Caused by Covid in 2021\",\n            y = \"Percent of all 2021 Deaths caused by Covid\",\n            x = \"Colorado Counties\") +\n       theme_light() +\n       theme(axis.text.x = element_text(angle = 290, size = 8, vjust = -0.5),\n             legend.position = \"none\")\n\nAnnum2021_Plot\n\n\n\n\n\n\n\nggsave(Annum2021_Plot, file = \"img/2021_Percent_Covid_Deaths.png\")\n\nSaving 7 x 5 in image\n\n\n#Question 6\n\n#Step ONE\nComparison_States &lt;- c(\"New York\",\"Colorado\",\"Alabama\",\"Ohio\")\n\nMulti_State &lt;- Combined_Calculated_Data |&gt;\n  filter(state == Comparison_States[1] | state == Comparison_States[2] | state == Comparison_States[3] | state == Comparison_States[4]) |&gt;\n  group_by(date, state) |&gt;\n  mutate(state_new_cases = sum(new_cases))\n         \nMulti_State &lt;- Multi_State |&gt;\n  summarize(Roll = (rollmean(state_new_cases, k = 7, fill = NA))) |&gt;\n  ungroup()\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'date', 'state'. You can override using the\n`.groups` argument.\n\nMulti_State |&gt;\n  filter(is.na(Roll)) |&gt; \n  head(20) |&gt;\n  glimpse()\n\nRows: 20\nColumns: 3\n$ date  &lt;date&gt; 2020-03-01, 2020-03-02, 2020-03-03, 2020-03-04, 2020-03-04, 202…\n$ state &lt;chr&gt; \"New York\", \"New York\", \"New York\", \"New York\", \"New York\", \"Col…\n$ Roll  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n\nglimpse(Multi_State)\n\nRows: 216,632\nColumns: 3\n$ date  &lt;date&gt; 2020-03-01, 2020-03-02, 2020-03-03, 2020-03-04, 2020-03-04, 202…\n$ state &lt;chr&gt; \"New York\", \"New York\", \"New York\", \"New York\", \"New York\", \"Col…\n$ Roll  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n\n#Step TWO\nggplot(data = Multi_State, aes(x=date, y = Roll)) +\n  geom_line(aes(y = Roll), fill = \"pink\", size = 1) +\n  geom_line(aes(y = Roll), col = \"darkred\", size = 1) +\n  theme_linedraw() +\n  facet_wrap(~state) +\n  labs(title = \"Cumulative COVID-19 Cases\", x = \"Date\", y = \"Case Count\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in geom_line(aes(y = Roll), fill = \"pink\", size = 1): Ignoring unknown\nparameters: `fill`\n\n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_line()`).\nRemoved 17 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n#Step THREE\nCalc_Multi_State &lt;- Combined_Calculated_Data |&gt;\n  filter(state == Comparison_States[1] | state == Comparison_States[2] | state == Comparison_States[3] | state == Comparison_States[4]) |&gt;\n  group_by(date, state) |&gt;\n  summarize(Calc_Roll = rollmean(sum(per_cap_new_cases),7,fill = NA)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\n\nglimpse(Calc_Multi_State)\n\nRows: 3,192\nColumns: 3\n$ date      &lt;date&gt; 2020-03-01, 2020-03-02, 2020-03-03, 2020-03-04, 2020-03-05,…\n$ state     &lt;chr&gt; \"New York\", \"New York\", \"New York\", \"New York\", \"Colorado\", …\n$ Calc_Roll &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n\nggplot(data = Calc_Multi_State, aes(x=date, y = Calc_Roll)) +\n  geom_line(aes(y = Calc_Roll), fill = \"pink\", size = 1) +\n  geom_line(aes(y = Calc_Roll), col = \"darkred\", size = 1) +\n  theme_linedraw() +\n  facet_wrap(~state) +\n  labs(title = \"Cumulative COVID-19 Cases Per Capita\", x = \"Date\", y = \"Case Count\")\n\nWarning in geom_line(aes(y = Calc_Roll), fill = \"pink\", size = 1): Ignoring\nunknown parameters: `fill`"
  }
]